"""
646. Maximum Length of Pair Chain

You are given n pairs of numbers. In every pair, the first number is always smaller than the second number.

Now, we define a pair (c, d) can follow another pair (a, b) if and only if b < c. Chain of pairs can be formed in this fashion.

Given a set of pairs, find the length longest chain which can be formed. You needn't use up all the given pairs. You can select pairs in any order.

Example 1:
Input: [[1,2], [2,3], [3,4]]
Output: 2
Explanation: The longest chain is [1,2] -> [3,4]
Note:
The number of given pairs will be in the range [1, 1000].

"""

# MOWN solution
class Solution(object):
    def __init__(self):
        self.dp = dict()

    def findLongestChain(self, pairs):
        """
        :type pairs: List[List[int]]
        :rtype: int
        """
        pairs = sorted(pairs, key=lambda x: x[1])
        return self.findLongest(pairs)

    def findLongest(self, pairs):
        if len(pairs) < 2:
            self.dp[tuple(pairs[0])] = len(pairs)
            return len(pairs)

        maxer = 0
        if self.dp.has_key(tuple(pairs[0])):
            return self.dp[tuple(pairs[0])]

        for j in range(1, len(pairs)):
            current = self.findLongest(pairs[j:])
            maxer = max(maxer, 1 + current if pairs[0][1] < pairs[j][0] else current)

        self.dp[tuple(pairs[0])] = maxer
        return self.dp[tuple(pairs[0])]

# GOT TLE For the following output
'''
[[136,182],[-970,552],[-921,549],[-563,-553],[535,714],[-816,-35],[-28,565],[-411,-175],
[87,798],[0,678],[-752,-95],[211,259],[945,989],[-708,52],[290,328],[-1,677],[-611,-156],
[250,647],[61,647],[674,863],[-737,162],[304,673],[975,993],[-436,-311],[280,550],[787,811],
[319,774],[261,909],[75,720],[-829,-490],[718,853],[837,932],[829,968],[643,876],[587,908],
[830,926],[-180,440],[-119,134],[432,874],[-19,40],[-512,65],[-201,236],[-566,452],[315,956],
[280,431],[579,606],[-76,437],[-825,345],[-8,925],[-550,460],[912,941],[-22,516],[-253,397],
[-7,43],[-663,-258],[465,864],[575,899],[-398,39],[-102,891],[-969,-719],[-949,559],[-828,482],
[-911,287],[-931,730],[-270,38],[-441,65],[48,166],[-623,152],[-577,0],[859,943],[-740,-699],
[878,960],[997,999],[521,584],[629,632],[-457,93],[912,960],[-775,-586],[718,959],[-711,-391],
[-801,19],[-93,417],[606,674],[833,846],[-120,454],[-178,660],[-129,748],[-342,852],[843,890],
[-111,665],[-145,221],[277,881],[887,914],[384,645],[384,819],[-518,-440],[-396,550],[59,811],
[-67,917],[169,455],[772,883],[-797,616],[-805,-435],[-277,-22],[-671,-374],[238,463],[-985,238],
[-705,326],[-218,-8],[414,556],[790,941],[745,814],[398,744],[87,398],[-772,839],[-566,210],
[-923,-517],[374,799],[809,998],[724,846],[835,968],[-506,-14],[-115,613],[807,853],[223,802],
[-325,-156],[834,966],[-933,-267],[-995,749],[-901,643],[188,549],[1,833],[826,947],[-774,381],
[432,773],[704,991],[232,666],[-950,548],[871,934],[589,629],[83,837],[626,843],[789,839],
[-48,307],[171,432],[684,785],[-417,-12],[-569,705],[107,972],[-604,792],[793,946],[868,957],
[489,896],[-319,346],[246,629],[-776,-563],[-717,158],[75,171],[900,936],[471,906],[388,968],
[-274,267],[-268,362],[-595,682],[985,989],[787,842],[-149,359],[-606,703],[-797,317],[689,900],
[230,322],[446,871],[310,794],[336,582],[-673,-355],[-717,-170],[516,616],[502,910],[-298,-232],
[647,957],[812,938],[36,116],[839,872],[739,809],[803,807],[-416,877],[-953,632],[727,797],[464,473],
[-134,403],[520,814],[-603,209],[-921,-705],[805,918],[-552,628],[656,778],[402,896],[-853,585],
[60,729],[-743,-400],[436,883],[-950,275],[-901,743],[-698,268],[625,695],[274,679],[355,924],
[-465,373],[171,578],[139,433],[-503,847],[-275,285],[-228,517],[-584,-549],[-831,415],[-892,733],
[-44,520],[824,960],[979,990],[-621,848],[745,848],[-983,310],[-307,664],[-721,822],[305,947],
[-23,716],[-114,5],[534,670],[-479,-349],[-691,177],[-263,-204],[17,233],[-303,-180],[737,989],
[-73,174],[926,951],[627,921],[-144,399],[896,923],[-428,-401],[754,888],[872,907],[144,616],
[-152,382],[-142,450],[13,624],[521,792],[-364,355],[7,163],[70,560],[610,761],[-952,667],
[-470,-396],[111,981],[657,854],[-266,208],[247,852],[-824,-707],[684,931],[-398,195],[929,989],
[-553,358],[753,946],[364,856],[-650,-157],[-45,511],[540,707],[-622,411],[-769,-456],
[-185,603],[38,167],[470,562],[328,516],[-698,-97],[616,901],[-738,730],[399,972],[-432,637],
[73,132],[660,848],[-554,947],[970,983],[677,771],[-556,-231],[-821,-280],[681,903],[367,917],
[-60,-5],[736,822],[835,847],[-344,-201],[28,234],[581,588],[901,980],[103,923],[-109,134],
[346,671],[-523,249],[-629,-601],[-32,643],[967,968],[-654,185],[-483,-30],[336,484],[-278,569],
[776,890],[-161,-60],[129,689],[450,959],[549,893],[-631,-488],[-475,850],[-764,-512],[694,869],
[468,572],[107,190],[-509,-75],[624,872],[206,842],[419,519],[-662,737],[-68,520],[878,952],[193,856],
[-748,-557],[445,773],[864,975],[-329,570],[-272,579],[-984,183],[526,1000],[-163,684],[951,982],
[-50,803],[-855,800],[-658,314],[443,710],[545,917],[-823,-231],[230,457],[-205,-156],[-424,-220],
[-876,-268],[828,853],[743,922],[-928,-53],[478,483],[-288,505],[-585,141],[-665,183],[-117,528],
[-491,-266],[-580,201],[-749,781],[330,556],[791,986],[-762,-615],[257,954],[961,969],[995,998],
[236,430],[-120,244],[-752,-459],[113,804],[-470,652],[605,952],[-136,106],[-430,982],[787,874],
[-782,-593],[678,808],[647,854],[-42,967],[577,969],[665,986],[-110,74],[-414,868],[192,209],
[747,765],[545,957],[-726,377],[-610,323],[-412,537],[958,972],[413,909],[-713,-297],
[-871,-839],[258,292],[1,872],[-138,363],[-250,533],[-842,502],[963,982],[-867,-547],
[327,804],[-17,749],[-457,-377],[773,806],[-899,512],[254,337],[279,563],[-795,-183],[508,839],[62,213],
[343,737],[-202,394],[-594,-369],[841,854],[270,981],[331,661],[-38,726],[-885,-444],[-899,-368],[-36,517],
[254,954],[-604,762],[410,539],[-698,717],[-391,-259],[860,865],[-265,501],[-123,-106],[659,941],[-690,751],
[-689,717],[-599,456],[932,984],[72,461],[469,524],[-551,-328],[715,897],[553,899],[-805,40],[-350,-86],
[421,425],[-905,922],[-345,-249],[399,469],[620,817],[975,978],[-64,441],[-130,350],[393,402],[-445,349],
[-215,148],[-384,196],[-238,11],[257,727],[-853,-487],[553,864],[38,961],[734,736],[18,672],[438,642],
[363,678],[463,684],[304,725],[633,662],[-754,-114],[-547,421],[-697,-111],[-828,-811],[-529,-432],[49,965],
[-231,588],[-707,457],[674,851],[263,393],[-336,365],[421,694],[-156,53],[-987,-355],[-43,979],[95,97],[44,689],
[612,666],[-895,-629],[362,550],[982,999],[-450,120],[-47,70],[722,854],[-16,685],[408,548],[-478,-174],
[645,909],[140,466],[-406,225],[603,723],[-527,697],[188,639],[82,135],[743,806],[866,887],[-42,34],[907,913],
[-510,64],[-871,-399],[476,684],[-929,318],[-714,442],[399,727],[926,943],[916,971],[-364,762],[899,999],
[-743,695],[-196,670],[-943,476],[50,89],[116,244],[257,637],[-830,-140],[-32,156],[-251,-211],[301,473],
[725,733],[-452,659],[-967,-653],[-469,52],[246,855],[311,469],[-567,490],[-438,39],[-451,107],[213,414],
[-573,-423],[-280,696],[-640,-482],[424,461],[-443,530],[-506,-487],[111,523],[595,720],[-791,-517],[688,995],
[87,945],[-58,59],[-30,749],[395,618],[80,438],[464,481],[903,987],[-746,-246],[969,979],[-836,965],[599,779],
[881,952],[-912,-534],[470,922],[422,432],[-107,99]]

'''

# LUP Solution (also got TLE )
class Solution(object):
    def findLongestChain(self, pairs):
        """
        :type pairs: List[List[int]]
        :rtype: int
        """
        # pairs = sorted(pairs, key=lambda x:x[0])
        pairs.sort(key=lambda x: (x[0], x[1]))
        LIS = [1] * len(pairs)
        for i in range(1, len(pairs)):
            for j in range(i):
                LIS[i] = max(LIS[i], LIS[j] + 1) if pairs[j][1] < pairs[i][0] else LIS[i]

        return LIS[-1]